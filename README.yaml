---
#
# Run `make createdocs` to rebuild the `README.md`
#

# Name of this project
name: terraform-aws-ec2-instance
title: Create AWS EC2 Linux or Windows Servers

# Build Badges
badges:
  - name: "Build Status"
    image: "https://circleci.com/gh/ifunky/terraform-aws-ec2-instance.svg?style=svg"
    url: "https://circleci.com/gh/ifunky/terraform-aws-ec2-instance"
  - name: "License"
    image: "https://img.shields.io/badge/License-Apache%202.0-blue.svg"
    url: "https://opensource.org/licenses/Apache-2.0"

description: |-
  This module creates Linux or Windows EC2 instances.

  ## Features

  ### Linux/Windows Server

  - Optionally set an Elastic IP (EIP)
  - Specify an IAM role
  - Assign security groups
  - Optionally join a domain using SSM documents (see notes below)
  - Attach 1 or more additional EBS volumes

  ### User Data
  - Specify optional user data scripts

  ## Custom User Data
  Add your own server specifc user data scripts (see full example below) that will be executed after the disk intialisation.  To debug the scripts see the 
  following folder on the running instance: C:\ProgramData\Amazon\EC2-Windows\Launch\Log

  ## Domain Joining
  In order to join a domain as part of provisioning an Active Directory and SSM document must be in place already.  
  When using AWS AD sharing a default SSM document will be created that can be used.

  ## Block Device mapping
  This module follows the AWS conventions where by `\dev\sda1` is defined as the root device and all other ebs volumes use the recommended names `xvd[f-z] *`
  When creating addtional ebs volumes you can specify any variables as described in the Terraform docs: https://www.terraform.io/docs/providers/aws/r/instance.html#block-devices

  For Windows you can specify the following drive properties as well:
  - volume_letter
  - volume_name

  For example:
  ```hcl
   ebs_block_device = [
              {
                volume_letter         = "E"
                volume_name           = "Data"
                device_name           = "xvdg"
                volume_type           = "gp2"
                volume_size           = 20
                delete_on_termination = true
              }
    ]
  ```

# How to use this project
usage: |-
  ```hcl
  module "ec2_myserver" {
    source = "git::https://github.com/ifunky/terraform-aws-ec2-instance?ref=master"

    key_name        = "${var.useful_thing}"
    instance_type   = "t3a.small"
    vpc_id          = "a-12345678"
    security_groups = ["sg_windows"]
    subnet          = "i-3r4t555"
    name            = "My_Server"
    namespace       = "ifunky"
    stage           = "dev"
    tags = {
      Terraform = "true"
    }
  }
  ```
  Full example
  ```hcl
  module "ec2_myserver" {
    source = "git::https://github.com/ifunky/terraform-aws-ec2-instance?ref=master"

    key_name        = var.my_key
    instance_type   = "t3a.small"
    vpc_id          = "a-e343434334"
    security_groups = ["sg_windows"]
    subnet          = "i-573443ww"
    name            = "My_Server"
    namespace       = "ifunky"
    stage           = "dev"

    user_data       =<<EOF
        echo "test" > c:\windows\temp\log1.log
        echo "test2" > c:\windows\temp\log2.log
        EOF

    join_domain               = true
    join_domain_ssm_document  = "awsconfig_Domain_d-34343434_ifunky.com"
    join_domain_ssm_params    = {
      ServerName = "MyServerName"
    }

    ebs_block_device = [
              {
                volume_letter         = "E"
                volume_name           = "Data"
                device_name           = "xvdg"
                volume_type           = "gp2"
                volume_size           = 20
                delete_on_termination = true
              },
              {
                volume_letter         = "F"
                volume_name          = "Logs"
                device_name           = "xvdh"
                volume_type           = "gp2"
                volume_size           = 25
                delete_on_termination = true
              },
              ]

    tags = {
      Terraform = "true"
    }
  }
  ```

# Include output from terraform-module-inspect
include:
  - "docs/targets.md"
  - "docs/metadata.md"

# List of useful related projects/links
related:
  - name: "PolyDev"
    description: "PolyDev repo and setup guide"
    url: "https://github.com/ifunky/polydev"

references:
  - name: "AWS Windows User Data"
    description: "AWS Windows User Data guide"
    url: "https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html" 
  - name: "AWS Windows Device Mapping"
    description: "AWS Windows Volume Mapping"
    url: "https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-volumes.html#windows-volume-mapping" 
  - name: "Terraform EC2 Instance"
    description: "Terraform EC2 documentation"
    url: "https://www.terraform.io/docs/providers/aws/r/instance.html" 